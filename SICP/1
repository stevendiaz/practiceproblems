


# 1.6

Question: Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. ‘‘Why
can’t I just define it as an ordinary procedure in terms of cond?’’ she asks. Alyssa’s friend Eva Lu
Ator claims this can indeed be done, and she defines a new version of if:

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

Key idea: applicative vs normal evaluation.
If the interpreter uses applicative evaluation, then the else clause will
get evaluated and cause an infinite loop.

# 1.9

(define (+ a b)
  (if (= a 0)
    b
    (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
    b
    (+ (dec a) (inc b))))

Using the substitution model, illustrate the porcess generated by each procedure of
(+ 4 5)
Are these processes iterative or recursive?
(+ 4 5)
(+ (inc (+ 3 5)))
(+ (inc (inc (+ 2 5))))
(+ (inc (inc (inc (+ 1 5)))))
(+ (inc (inc (inc (inc (+ 0 5))))))
(+ (inc (inc (inc (inc 5)))))
(+ (inc (inc (inc 6))))
(+ (inc (inc 7)))
(+ (inc 8))
9

(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9

# 1.10

(f n) = 2n
(g n) = 2 (A 1 (n - 1))


#1.11
A function f is defined by the rule that f(n) = n if n<3 and f(n) = f(n - 1) + 2f(n - 2) +
3f(n - 3) if n> 3. Write a procedure that computes f by means of a recursive process. Write a procedure
that computes f by means of an iterative process.

-- Recursive
(define (f n)
  (if (< n 3)
    n
    (+ (f (- n 1))
       (* 2 (f (- n 2)))
       (* 3 (f (- n 3))))))
-- Iterative
(define (f n)
  (if (< n 3)
    n
    (f-iter n n n n))

(define (f-iter n1 n2 n3 n c)
  (if (= c n)
    n1
    (f-iter (+ n1 (* 2 n2) (* 3 n3))
            n1
            n2
            n
            (inc c))))

#1.12
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1

